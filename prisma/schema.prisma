generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id          String   @id @default(uuid())
    email       String   @unique
    firstName   String  @map("first_name")
    lastName    String  @map("last_name")
    password    String?
    role        String
    status      String   @default("Active")
    position    String
    salary      Int
    phone      String?
    firstDayInCompany DateTime @default(now()) @map("first_day_in_company")
    dateOfBirth DateTime? @map("date_of_birth")
    inviteToken String?
    employee    Employee?
	  sales 	    Sales?
    projectManager ProjectManager?
    notificationFromUser Notification[] @relation(name: "FromUser")
    notificationToUser Notification[] @relation(name: "ToUser")

    @@map("users")
}

model Employee {
    id                String  @id @default(uuid())
    projectEngagement String  @map("project_engagement") @default("Available")
    hoursPerWeek      Int     @map("hours_per_week") @default(0)
    userId            String? @unique 
    user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    employeeOnProject EmployeeOnProject[]
    employeeReport EmployeeReport[]

    @@map("employees")
}

model Sales {
   	id                String  @id @default(uuid())
    userId            String? @unique 
    user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    project           Project[]

	@@map("sales")
}


model ProjectManager {
  id         String   @id @default(uuid())
  userId     String?  @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project[]

  @@map("project_managers")
}

model Project {
  id              String  @id @default(uuid())
  name            String
  clientName      String  @map("client_name")
  rate            Int
  hoursInWeek     Int     @map("hours_in_week")
  teamInfo        String  @map("team_info")
  status          String
  isOnUpwork      Boolean @default(false)
  salesId          String? @map("sales_id")
  sales           Sales?  @relation(fields: [salesId], references: [id], onDelete: Cascade)
  projectManagerId String? @map("project_manager_id")
  projectManager ProjectManager? @relation(fields: [projectManagerId], references: [id], onDelete: Cascade)
  employeeOnProject EmployeeOnProject[]
  employeeReport EmployeeReport[]

  @@map("projects")
}

model EmployeeOnProject {
  employeeId  String @map("employee_id")
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  projectId   String @map("project_id")
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hoursWorked Int @map("hours_worked")  @default(0)

  @@id([employeeId, projectId])
  @@map("employees_on_projects")
}

model EmployeeReport {
  id              String   @id @default(uuid())
  employeeId      String   @map("employee_id")
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  projectId       String   @map("project_id")
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hoursWorked     Int      @map("hours_worked")
  startTime       String   @map("start_date")
  endTime         String   @map("end_date")
  date            DateTime
  text            String
  editStatus      String   @default("Default") @map("edit_status")
  deleteStatus    String   @default("Default") @map("delete_status")
  updatedAt       DateTime? @map("updated_at")
  createdAt       DateTime @default(now()) @map("created_at")
  notification    Notification[]
  projectIncome   ProjectIncome?

  @@map("employees_reports")
}

model Notification {
  id              String   @id @default(uuid())
  fromUserId      String   @map("from_user_id")
  fromUser        User     @relation(name: "FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId        String   @map("to_user_id")
  toUser          User     @relation(name: "ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  title           String
  text            String
  status           String   @default("Pending")
  reportId        String?  @map("report_id")
  hideStatus      String   @default("None") @map("hide_status")
  report          EmployeeReport? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  isNew           Boolean  @default(true) @map("is_new")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("notifications")
}

model ProjectIncome {
  id String @id @default(uuid())
  projectName String @map("project_name")
  clientName String @map("client_name")
  hours Int
  amount Int
  status String @default("Pending")
  date DateTime
  employeeReportId String @unique @map("employee_report_id")
  employeeReport   EmployeeReport @relation(fields: [employeeReportId], references: [id], onDelete: Cascade)

  @@map("project_income")
}